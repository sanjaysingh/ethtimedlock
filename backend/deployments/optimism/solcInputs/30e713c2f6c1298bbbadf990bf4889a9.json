{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/TimedLockerV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract TimedLockerV5 is ReentrancyGuard {\r\n    struct Lock {\r\n        address locker;\r\n        address beneficiary;\r\n        uint256 value;\r\n        uint256 unlockTimestamp;\r\n    }\r\n\r\n    mapping(address => mapping(address => bool)) private designatedLockers;\r\n    mapping(address => Lock[]) private lockedFundsByBeneficiary;\r\n    mapping(address => Lock[]) private lockedFundsByLocker;\r\n\r\n    // check if the given locker has been designated by the beneficiary. An address is always self-designated.\r\n    function isDesignatedLocker(address beneficiary, address locker) internal view returns (bool) {\r\n        return locker == beneficiary || designatedLockers[beneficiary][locker];\r\n    }\r\n\r\n    // Beneficiary should designate who can lock values for them. This allows to prevent spamming.\r\n    function addDesignatedLocker(address locker) external {\r\n        require(!designatedLockers[msg.sender][locker], \"Already a designated locker.\");\r\n        designatedLockers[msg.sender][locker] = true;\r\n    }\r\n\r\n    // remove given designnated locker\r\n    function removeDesignatedLocker(address locker) external {\r\n        require(designatedLockers[msg.sender][locker], \"Locker not found.\");\r\n        designatedLockers[msg.sender][locker] = false;\r\n    }\r\n\r\n    // lock ether for the given beneficiary and given timestamp\r\n    function deposit(address beneficiary, uint256 unlockTimestamp) external payable {\r\n        require(isDesignatedLocker(beneficiary, msg.sender), \"Not a designated locker.\");\r\n        require(unlockTimestamp > block.timestamp, \"Unlock timestamp must be in future.\");\r\n\r\n        Lock memory newLock = Lock(msg.sender, beneficiary, msg.value, unlockTimestamp);\r\n        lockedFundsByBeneficiary[beneficiary].push(newLock);\r\n        lockedFundsByLocker[msg.sender].push(newLock);\r\n    }\r\n\r\n    // withdraw all eligible values for the beneficiary (sender). Eligible value is one whose timestamp has reached\r\n    function withdraw() external nonReentrant {\r\n        Lock[] storage beneficiaryLocks = lockedFundsByBeneficiary[msg.sender];\r\n        uint256 totalEligibleValue = 0;\r\n        uint256 i = 0;\r\n\r\n        while (i < beneficiaryLocks.length) {\r\n            if (beneficiaryLocks[i].unlockTimestamp <= block.timestamp) {\r\n                totalEligibleValue += beneficiaryLocks[i].value;\r\n\r\n                // Remove lock from lockedFundsByLocker\r\n                Lock[] storage lockerLocks = lockedFundsByLocker[beneficiaryLocks[i].locker];\r\n                for (uint256 j = 0; j < lockerLocks.length; j++) {\r\n                    if (lockerLocks[j].beneficiary == msg.sender && lockerLocks[j].unlockTimestamp == beneficiaryLocks[i].unlockTimestamp) {\r\n                        lockerLocks[j] = lockerLocks[lockerLocks.length - 1];\r\n                        lockerLocks.pop();\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Remove lock from lockedFundsByBeneficiary\r\n                beneficiaryLocks[i] = beneficiaryLocks[beneficiaryLocks.length - 1];\r\n                beneficiaryLocks.pop();\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        require(totalEligibleValue > 0, \"No eligible locked value to withdraw\");\r\n        payable(msg.sender).transfer(totalEligibleValue);\r\n    }\r\n\r\n    // get all locks by the given locker\r\n    function getLockedValuesByLocker(address locker) external view returns (Lock[] memory) {\r\n        return lockedFundsByLocker[locker];\r\n    }\r\n\r\n    // get all locks for the given beneficiary\r\n    function getLockedValuesForBeneficiary(address beneficiary) external view returns (Lock[] memory) {\r\n        return lockedFundsByBeneficiary[beneficiary];\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}